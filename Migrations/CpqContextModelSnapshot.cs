// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mtd.Cpq.Manager.Data;

namespace Mtd.Cpq.Manager.Migrations
{
    [DbContext(typeof(CpqContext))]
    partial class CpqContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqCatalog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_number");

                    b.Property<byte[]>("Image")
                        .HasColumnType("mediumblob")
                        .HasColumnName("image");

                    b.Property<string>("ImportTag")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("import_tag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(768)")
                        .HasColumnName("note");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("IdNumber")
                        .HasDatabaseName("ix_number");

                    b.HasIndex("Sequence")
                        .HasDatabaseName("ix_sequence");

                    b.ToTable("mtd_cpq_catalog");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.Property<string>("ValueType")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("value_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_config");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqConfigFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("mediumblob")
                        .HasColumnName("file_data");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_config_file");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqCounter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<long>("Counter")
                        .HasColumnType("bigint")
                        .HasColumnName("id_number");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_counter");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqImport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("DatasheetLoad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("datasheet_load")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("NoteLoad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("note_load")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("OldToArchive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("old_to_archive")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("StatusProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status_process")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("StatusText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status_text");

                    b.Property<DateTime>("TimeCr")
                        .HasColumnType("datetime")
                        .HasColumnName("time_cr");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("StatusProcess")
                        .HasDatabaseName("idx_process");

                    b.ToTable("mtd_cpq_import");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqImportData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<int>("Action")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("action")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Datasheet")
                        .HasColumnType("text")
                        .HasColumnName("datasheet");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_number");

                    b.Property<sbyte>("MasterProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("master_product")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdCpqImportId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_import_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Parent")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("parent");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<sbyte>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("required")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("TagCatalog")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("catalog_tag");

                    b.Property<string>("TagOneOf")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("one_of");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("IdNumber")
                        .HasDatabaseName("idx_number");

                    b.HasIndex("MtdCpqImportId")
                        .HasDatabaseName("fk_import_data_history_idx");

                    b.ToTable("mtd_cpq_import_data");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqImportParam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<int>("ColData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("col_data")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("ColName")
                        .HasColumnType("int(11)")
                        .HasColumnName("col_name");

                    b.Property<int>("ColNote")
                        .HasColumnType("int(11)")
                        .HasColumnName("col_note");

                    b.Property<int>("ColNumber")
                        .HasColumnType("int(11)")
                        .HasColumnName("col_number");

                    b.Property<int>("ColPrice")
                        .HasColumnType("int(11)")
                        .HasColumnName("col_price");

                    b.Property<string>("TagData")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tag_data");

                    b.Property<string>("TagMaster")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tag_master");

                    b.Property<string>("TagRequired")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tag_required");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_import_param");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<DateTime>("TimeCr")
                        .HasColumnType("datetime")
                        .HasColumnName("timecr");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_notification");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqOneOf", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("color");

                    b.Property<string>("ImportTag")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("import_tag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_one_of");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Afactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("afactor")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("archive")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Datasheet")
                        .HasColumnType("text")
                        .HasColumnName("datasheet");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_number");

                    b.Property<byte[]>("Image")
                        .HasColumnType("mediumblob")
                        .HasColumnName("image");

                    b.Property<string>("MtdCpqCatalogId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_catalog_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Som")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("som")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Trial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("trial")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Archive")
                        .HasDatabaseName("ix_archive");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("IdNumber")
                        .IsUnique()
                        .HasDatabaseName("id_number_UNIQUE");

                    b.HasIndex("MtdCpqCatalogId")
                        .HasDatabaseName("fk_mtd_cpq_item_mtd_cpq_catalog1_idx");

                    b.HasIndex("Som")
                        .HasDatabaseName("ix_som_index");

                    b.ToTable("mtd_cpq_product");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("ConfigChangeRule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("config_change_rule")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ConfigMasterInluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("config_master_included")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("CustomerCurrency")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customer_currency");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime")
                        .HasColumnName("date_creation");

                    b.Property<string>("DeliveryCondition")
                        .HasColumnType("text")
                        .HasColumnName("delivery_condition");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(3072)")
                        .HasColumnName("description");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_number");

                    b.Property<string>("Language")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("language");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("mediumblob")
                        .HasColumnName("logo");

                    b.Property<sbyte>("LogoFlexible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("logo_flexible")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("LogoHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("logo_height")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("LogoWidth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("logo_width")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal>("MasterAfactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("master_afactor")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MasterDatasheet")
                        .HasColumnType("text")
                        .HasColumnName("master_datasheet");

                    b.Property<string>("MasterId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("master_id");

                    b.Property<byte[]>("MasterImage")
                        .HasColumnType("mediumblob")
                        .HasColumnName("master_image");

                    b.Property<string>("MasterName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("master_name");

                    b.Property<string>("MasterNote")
                        .HasColumnType("text")
                        .HasColumnName("master_note");

                    b.Property<string>("MasterNumber")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("master_number");

                    b.Property<decimal>("MasterPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("master_price")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<int>("MasterQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("master_qty")
                        .HasDefaultValueSql("1");

                    b.Property<string>("PreparedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("prepared_by");

                    b.Property<string>("PreparedFor")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("prepared_for");

                    b.Property<decimal>("PriceCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("price_customer")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<string>("TitleName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title_name");

                    b.Property<string>("TitleNote")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title_note");

                    b.Property<sbyte>("ViewAfactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_afactor")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("ViewDatasheet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_datasheet")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_delivery")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("ViewImages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_images")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_note")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewPriceCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_price_customer")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewPriceGross")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_price_gross")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("ViewProposal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_proposal")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("ViewQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_qty")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("DateCreation")
                        .HasDatabaseName("ix_datecreation");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("IdNumber")
                        .HasDatabaseName("ix_number");

                    b.HasIndex("MasterId")
                        .HasDatabaseName("idx_master_id");

                    b.ToTable("mtd_cpq_proposal");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalAnchor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("cid")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<sbyte>("Include")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("include");

                    b.Property<string>("MtdCpqProductId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_product_id")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<sbyte>("Required")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("required");

                    b.HasKey("Id");

                    b.HasIndex("Cid")
                        .HasDatabaseName("fk_proposal_anchor_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_proposal_anchor");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalCatalog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("CId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("cid");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_number");

                    b.Property<byte[]>("Image")
                        .HasColumnType("mediumblob")
                        .HasColumnName("image");

                    b.Property<string>("MtdCpqProposalId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_proposal_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(768)")
                        .HasColumnName("note");

                    b.Property<int>("Sequence")
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence");

                    b.HasKey("Id");

                    b.HasIndex("CId")
                        .HasDatabaseName("idx_cid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdCpqProposalId")
                        .HasDatabaseName("fk_mtd_cpq_proposal_catalog_idx");

                    b.ToTable("mtd_cpq_proposal_catalog");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("AnchorHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("anchor_history")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("AnchorNotice")
                        .HasColumnType("text")
                        .HasColumnName("anchor_notice");

                    b.Property<string>("Datasheet")
                        .HasColumnType("text")
                        .HasColumnName("datasheet");

                    b.Property<sbyte>("Forbidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("forbidden")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("id_number");

                    b.Property<byte[]>("Image")
                        .HasColumnType("mediumblob")
                        .HasColumnName("image");

                    b.Property<string>("MtdCpqProductId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_product_id");

                    b.Property<string>("MtdCpqProposalId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_proposal_id");

                    b.Property<string>("MtdCpqProposalOneOfId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_proposal_one_of_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProposalCatalogId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_proposal_catalog_id");

                    b.Property<int>("Qty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("qty")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("required")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Selected")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("selected");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdCpqProductId")
                        .HasDatabaseName("fk_mtd_cpq_rule_idx");

                    b.HasIndex("MtdCpqProposalId")
                        .HasDatabaseName("fk_mtd_cpq_complectation_mtd_cpq_proposal1_idx");

                    b.HasIndex("MtdCpqProposalOneOfId")
                        .HasDatabaseName("fk_mtd_cpq_proposalitems_one_of_idx");

                    b.HasIndex("ProposalCatalogId")
                        .HasDatabaseName("fk_mtd_cpq_proposalitems_catalog_idx");

                    b.HasIndex("Required")
                        .HasDatabaseName("IX_REQUIRED");

                    b.HasIndex("Selected")
                        .HasDatabaseName("IX_SELECTED");

                    b.ToTable("mtd_cpq_proposal_item");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalOneOf", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("CId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("cid");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("color");

                    b.Property<string>("MtdCpqProposalId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_proposal_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("CId")
                        .HasDatabaseName("idx_cid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdCpqProposalId")
                        .HasDatabaseName("fk_mtd_cpq_proposal_one_of_idx");

                    b.ToTable("mtd_cpq_proposal_one_of");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqReaderUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("message_id");

                    b.Property<DateTime>("TimeCr")
                        .HasColumnType("datetime")
                        .HasColumnName("timecr");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("fk_notification_user_idx");

                    b.HasIndex("UserName")
                        .HasDatabaseName("idx-username");

                    b.ToTable("mtd_cpq_reader_user");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqRuleAnchor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Notice")
                        .HasColumnType("text")
                        .HasColumnName("notice")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ProductAnchor")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("product_anchor")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ProductMaster")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("product_master")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("ProductAnchor")
                        .HasDatabaseName("fk_anchor_product_anchor_idx");

                    b.HasIndex("ProductMaster")
                        .HasDatabaseName("fk_anchor_product_master_idx");

                    b.ToTable("mtd_cpq_rule_anchor");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqRuleAnchorBind", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<sbyte>("Include")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("include");

                    b.Property<string>("MtdCpqProductId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_product_id")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("MtdCpqRuleAnchorId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_cpq_rule_anchor_id")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<sbyte>("Required")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("required");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdCpqProductId")
                        .HasDatabaseName("fk_anchor_required_idx");

                    b.HasIndex("MtdCpqRuleAnchorId")
                        .HasDatabaseName("fk_anchor_required_anchor_idx");

                    b.ToTable("mtd_cpq_rule_anchor_bind");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqRuleAvailable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("OneOfId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("one_of_id");

                    b.Property<string>("ProductIdChild")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("product_id_child");

                    b.Property<string>("ProductIdParent")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("product_id_parent");

                    b.Property<sbyte>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("required")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("OneOfId")
                        .HasDatabaseName("fk_mtd_cpq_rule_availablel_item_one_of_idx");

                    b.HasIndex("ProductIdChild")
                        .HasDatabaseName("fk_mtd_cpq_rule_available_mtd_cpq_product1_idx");

                    b.HasIndex("ProductIdParent")
                        .HasDatabaseName("fk_mtd_cpq_available_mtd_cpq_product1_idx");

                    b.ToTable("mtd_cpq_rule_available");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqTitles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Language")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("language");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("mediumblob")
                        .HasColumnName("logo");

                    b.Property<sbyte>("LogoFlexible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("logo_flexible")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("LogoHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("logo_height")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("LogoWidth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("logo_width")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PreparedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("prepared_by");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_cpq_titles");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqImportData", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqImport", "MtdCpqImport")
                        .WithMany("MtdCpqImportData")
                        .HasForeignKey("MtdCpqImportId")
                        .HasConstraintName("fk_import_data_history")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdCpqImport");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProduct", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqCatalog", "MtdCpqCatalog")
                        .WithMany("MtdCpqProduct")
                        .HasForeignKey("MtdCpqCatalogId")
                        .HasConstraintName("fk_mtd_cpq_item_mtd_cpq_catalog1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdCpqCatalog");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalAnchor", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProposalItem", "MtdCpqProposalItem")
                        .WithMany("MtdCpqProposalAnchor")
                        .HasForeignKey("Cid")
                        .HasConstraintName("fk_proposal_anchor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdCpqProposalItem");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalCatalog", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProposal", "MtdCpqProposal")
                        .WithMany("MtdCpqProposalCatalog")
                        .HasForeignKey("MtdCpqProposalId")
                        .HasConstraintName("fk_mtd_cpq_proposal_catalog")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MtdCpqProposal");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalItem", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProposal", "MtdCpqProposal")
                        .WithMany("MtdCpqProposalItem")
                        .HasForeignKey("MtdCpqProposalId")
                        .HasConstraintName("fk_mtd_cpq_complectation_mtd_cpq_proposal1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProposalOneOf", "MtdCpqProposalOneOf")
                        .WithMany("MtdCpqProposalItem")
                        .HasForeignKey("MtdCpqProposalOneOfId")
                        .HasConstraintName("fk_mtd_cpq_proposalitems_one_of")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProposalCatalog", "MtdCpqProposalCatalog")
                        .WithMany("MtdCpqProposalItem")
                        .HasForeignKey("ProposalCatalogId")
                        .HasConstraintName("fk_mtd_cpq_proposalitems_catalog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdCpqProposal");

                    b.Navigation("MtdCpqProposalCatalog");

                    b.Navigation("MtdCpqProposalOneOf");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalOneOf", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProposal", "MtdCpqProposal")
                        .WithMany("MtdCpqProposalOneOf")
                        .HasForeignKey("MtdCpqProposalId")
                        .HasConstraintName("fk_mtd_cpq_proposal_one_of")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MtdCpqProposal");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqReaderUser", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqNotification", "MtdCpqNotification")
                        .WithMany("MtdCpqReaderUsers")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("fk_notification_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdCpqNotification");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqRuleAnchor", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProduct", "ProductAnchorNavigation")
                        .WithMany("MtdCpqRuleAnchorProductAnchorNavigation")
                        .HasForeignKey("ProductAnchor")
                        .HasConstraintName("fk_anchor_product_anchor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProduct", "ProductMasterNavigation")
                        .WithMany("MtdCpqRuleAnchorProductMasterNavigation")
                        .HasForeignKey("ProductMaster")
                        .HasConstraintName("fk_anchor_product_master")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductAnchorNavigation");

                    b.Navigation("ProductMasterNavigation");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqRuleAnchorBind", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProduct", "MtdCpqProduct")
                        .WithMany("MtdCpqRuleAnchorBind")
                        .HasForeignKey("MtdCpqProductId")
                        .HasConstraintName("fk_anchor_required_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqRuleAnchor", "MtdCpqRuleAnchor")
                        .WithMany("MtdCpqRuleAnchorBind")
                        .HasForeignKey("MtdCpqRuleAnchorId")
                        .HasConstraintName("fk_anchor_required_anchor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdCpqProduct");

                    b.Navigation("MtdCpqRuleAnchor");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqRuleAvailable", b =>
                {
                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqOneOf", "MtdCpqOneOf")
                        .WithMany("MtdCpqRuleAvailable")
                        .HasForeignKey("OneOfId")
                        .HasConstraintName("fk_mtd_cpq_rule_available_item_one_of")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProduct", "ProductIdChildNavigation")
                        .WithMany("MtdCpqRuleAvailableProductIdChildNavigation")
                        .HasForeignKey("ProductIdChild")
                        .HasConstraintName("fk_mtd_cpq_rule_available_mtd_cpq_product1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.Cpq.Manager.Data.MtdCpqProduct", "ProductIdParentNavigation")
                        .WithMany("MtdCpqRuleAvailableProductIdParentNavigation")
                        .HasForeignKey("ProductIdParent")
                        .HasConstraintName("fk_mtd_cpq_available_mtd_cpq_product1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdCpqOneOf");

                    b.Navigation("ProductIdChildNavigation");

                    b.Navigation("ProductIdParentNavigation");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqCatalog", b =>
                {
                    b.Navigation("MtdCpqProduct");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqImport", b =>
                {
                    b.Navigation("MtdCpqImportData");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqNotification", b =>
                {
                    b.Navigation("MtdCpqReaderUsers");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqOneOf", b =>
                {
                    b.Navigation("MtdCpqRuleAvailable");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProduct", b =>
                {
                    b.Navigation("MtdCpqRuleAnchorBind");

                    b.Navigation("MtdCpqRuleAnchorProductAnchorNavigation");

                    b.Navigation("MtdCpqRuleAnchorProductMasterNavigation");

                    b.Navigation("MtdCpqRuleAvailableProductIdChildNavigation");

                    b.Navigation("MtdCpqRuleAvailableProductIdParentNavigation");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposal", b =>
                {
                    b.Navigation("MtdCpqProposalCatalog");

                    b.Navigation("MtdCpqProposalItem");

                    b.Navigation("MtdCpqProposalOneOf");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalCatalog", b =>
                {
                    b.Navigation("MtdCpqProposalItem");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalItem", b =>
                {
                    b.Navigation("MtdCpqProposalAnchor");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqProposalOneOf", b =>
                {
                    b.Navigation("MtdCpqProposalItem");
                });

            modelBuilder.Entity("Mtd.Cpq.Manager.Data.MtdCpqRuleAnchor", b =>
                {
                    b.Navigation("MtdCpqRuleAnchorBind");
                });
#pragma warning restore 612, 618
        }
    }
}
